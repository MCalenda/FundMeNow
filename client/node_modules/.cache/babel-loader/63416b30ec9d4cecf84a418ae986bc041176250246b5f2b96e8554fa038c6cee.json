{"ast":null,"code":"import { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\nexport class NetworkPlugin {\n  name;\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\nexport class GasCostPlugin extends NetworkPlugin {\n  effectiveBlock;\n  txBase;\n  txCreate;\n  txDataZero;\n  txDataNonzero;\n  txAccessListStorageKey;\n  txAccessListAddress;\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      assertArgument(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    defineProperties(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\n// Networks shoudl use this plugin to specify the contract address\n// and network necessary to resolve ENS names.\nexport class EnsPlugin extends NetworkPlugin {\n  // The ENS contract address\n  address;\n  // The network ID that the ENS contract lives on\n  targetNetwork;\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    defineProperties(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n  #feeDataFunc;\n  get feeDataFunc() {\n    return this.#feeDataFunc;\n  }\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    this.#feeDataFunc = feeDataFunc;\n  }\n  async getFeeData(provider) {\n    return await this.#feeDataFunc(provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(this.#feeDataFunc);\n  }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/","map":{"version":3,"names":["defineProperties","assertArgument","EnsAddress","NetworkPlugin","name","constructor","clone","GasCostPlugin","effectiveBlock","txBase","txCreate","txDataZero","txDataNonzero","txAccessListStorageKey","txAccessListAddress","costs","props","set","nullish","value","EnsPlugin","address","targetNetwork","FeeDataNetworkPlugin","feeDataFunc","getFeeData","provider"],"sources":["/Users/mc/Desktop/sdd_project/node_modules/ethers/src.ts/providers/plugins-network.ts"],"sourcesContent":["import { defineProperties } from \"../utils/properties.js\";\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport type {\n    FeeData, Provider\n} from \"./provider.js\";\n\n\n\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n\nexport class NetworkPlugin {\n    readonly name!: string;\n\n    constructor(name: string) {\n        defineProperties<NetworkPlugin>(this, { name });\n    }\n\n    clone(): NetworkPlugin {\n        return new NetworkPlugin(this.name);\n    }\n\n//    validate(network: Network): NetworkPlugin {\n//        return this;\n//    }\n}\n\n// Networks can use this plugin to override calculations for the\n// intrinsic gas cost of a transaction for networks that differ\n// from the latest hardfork on Ethereum mainnet.\nexport type GasCostParameters = {\n    txBase?: number;\n    txCreate?: number;\n    txDataZero?: number;\n    txDataNonzero?: number;\n    txAccessListStorageKey?: number;\n    txAccessListAddress?: number;\n};\n\nexport class GasCostPlugin extends NetworkPlugin implements GasCostParameters {\n    readonly effectiveBlock!: number;\n\n    readonly txBase!: number;\n    readonly txCreate!: number;\n    readonly txDataZero!: number;\n    readonly txDataNonzero!: number;\n    readonly txAccessListStorageKey!: number;\n    readonly txAccessListAddress!: number;\n\n    constructor(effectiveBlock?: number, costs?: GasCostParameters) {\n        if (effectiveBlock == null) { effectiveBlock = 0; }\n        super(`org.ethers.network.plugins.GasCost#${ (effectiveBlock || 0) }`);\n\n        const props: Record<string, number> = { effectiveBlock };\n        function set(name: keyof GasCostParameters, nullish: number): void {\n            let value = (costs || { })[name];\n            if (value == null) { value = nullish; }\n            assertArgument(typeof(value) === \"number\", `invalud value for ${ name }`, \"costs\", costs);\n            props[name] = value;\n        }\n\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n\n        defineProperties<GasCostPlugin>(this, props);\n    }\n\n    clone(): GasCostPlugin {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n\n// Networks shoudl use this plugin to specify the contract address\n// and network necessary to resolve ENS names.\nexport class EnsPlugin extends NetworkPlugin {\n\n    // The ENS contract address\n    readonly address!: string;\n\n    // The network ID that the ENS contract lives on\n    readonly targetNetwork!: number;\n\n    constructor(address?: null | string, targetNetwork?: null | number) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties<EnsPlugin>(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1: targetNetwork)\n        });\n    }\n\n    clone(): EnsPlugin {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #feeDataFunc: (provider: Provider) => Promise<FeeData>;\n\n    get feeDataFunc(): (provider: Provider) => Promise<FeeData> {\n        return this.#feeDataFunc;\n    }\n\n    constructor(feeDataFunc: (provider: Provider) => Promise<FeeData>) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n\n    async getFeeData(provider: Provider): Promise<FeeData> {\n        return await this.#feeDataFunc(provider);\n    }\n\n    clone(): FeeDataNetworkPlugin {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\n\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,wBAAwB;AAEzD,SAASC,cAAc,QAAQ,mBAAmB;AAQlD,MAAMC,UAAU,GAAG,4CAA4C;AAE/D,OAAM,MAAOC,aAAa;EACbC,IAAI;EAEbC,YAAYD,IAAY;IACpBJ,gBAAgB,CAAgB,IAAI,EAAE;MAAEI;IAAI,CAAE,CAAC;EACnD;EAEAE,KAAKA,CAAA;IACD,OAAO,IAAIH,aAAa,CAAC,IAAI,CAACC,IAAI,CAAC;EACvC;;AAmBJ,OAAM,MAAOG,aAAc,SAAQJ,aAAa;EACnCK,cAAc;EAEdC,MAAM;EACNC,QAAQ;EACRC,UAAU;EACVC,aAAa;EACbC,sBAAsB;EACtBC,mBAAmB;EAE5BT,YAAYG,cAAuB,EAAEO,KAAyB;IAC1D,IAAIP,cAAc,IAAI,IAAI,EAAE;MAAEA,cAAc,GAAG,CAAC;;IAChD,KAAK,CAAC,sCAAwCA,cAAc,IAAI,CAAG,EAAE,CAAC;IAEtE,MAAMQ,KAAK,GAA2B;MAAER;IAAc,CAAE;IACxD,SAASS,GAAGA,CAACb,IAA6B,EAAEc,OAAe;MACvD,IAAIC,KAAK,GAAG,CAACJ,KAAK,IAAI,EAAG,EAAEX,IAAI,CAAC;MAChC,IAAIe,KAAK,IAAI,IAAI,EAAE;QAAEA,KAAK,GAAGD,OAAO;;MACpCjB,cAAc,CAAC,OAAOkB,KAAM,KAAK,QAAQ,EAAE,qBAAsBf,IAAK,EAAE,EAAE,OAAO,EAAEW,KAAK,CAAC;MACzFC,KAAK,CAACZ,IAAI,CAAC,GAAGe,KAAK;IACvB;IAEAF,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC;IACpBA,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;IACtBA,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;IACpBA,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC;IACxBA,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC;IACnCA,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC;IAEhCjB,gBAAgB,CAAgB,IAAI,EAAEgB,KAAK,CAAC;EAChD;EAEAV,KAAKA,CAAA;IACD,OAAO,IAAIC,aAAa,CAAC,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvD;;AAGJ;AACA;AACA,OAAM,MAAOY,SAAU,SAAQjB,aAAa;EAExC;EACSkB,OAAO;EAEhB;EACSC,aAAa;EAEtBjB,YAAYgB,OAAuB,EAAEC,aAA6B;IAC9D,KAAK,CAAC,gCAAgC,CAAC;IACvCtB,gBAAgB,CAAY,IAAI,EAAE;MAC9BqB,OAAO,EAAGA,OAAO,IAAInB,UAAW;MAChCoB,aAAa,EAAIA,aAAa,IAAI,IAAI,GAAI,CAAC,GAAEA;KAChD,CAAC;EACN;EAEAhB,KAAKA,CAAA;IACD,OAAO,IAAIc,SAAS,CAAC,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,aAAa,CAAC;EAC1D;;AAGJ,OAAM,MAAOC,oBAAqB,SAAQpB,aAAa;EAC1C,CAAAqB,WAAY;EAErB,IAAIA,WAAWA,CAAA;IACX,OAAO,IAAI,CAAC,CAAAA,WAAY;EAC5B;EAEAnB,YAAYmB,WAAqD;IAC7D,KAAK,CAAC,oCAAoC,CAAC;IAC3C,IAAI,CAAC,CAAAA,WAAY,GAAGA,WAAW;EACnC;EAEA,MAAMC,UAAUA,CAACC,QAAkB;IAC/B,OAAO,MAAM,IAAI,CAAC,CAAAF,WAAY,CAACE,QAAQ,CAAC;EAC5C;EAEApB,KAAKA,CAAA;IACD,OAAO,IAAIiB,oBAAoB,CAAC,IAAI,CAAC,CAAAC,WAAY,CAAC;EACtD;;AAGJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}