{"ast":null,"code":"import { assert } from \"../utils/index.js\";\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nfunction isWebSocketLike(value) {\n  return value && typeof value.send === \"function\" && typeof value.close === \"function\";\n}\nexport function getDefaultProvider(network, options) {\n  if (options == null) {\n    options = {};\n  }\n  if (typeof network === \"string\" && network.match(/^https?:/)) {\n    return new JsonRpcProvider(network);\n  }\n  if (typeof network === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n    return new WebSocketProvider(network);\n  }\n  const providers = [];\n  if (options.alchemy !== \"-\") {\n    try {\n      providers.push(new AlchemyProvider(network, options.alchemy));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  if (options.ankr !== \"-\" && options.ankr != null) {\n    try {\n      providers.push(new AnkrProvider(network, options.ankr));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  if (options.cloudflare !== \"-\") {\n    try {\n      providers.push(new CloudflareProvider(network));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  if (options.etherscan !== \"-\") {\n    try {\n      providers.push(new EtherscanProvider(network, options.etherscan));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  if (options.infura !== \"-\") {\n    try {\n      let projectId = options.infura;\n      let projectSecret = undefined;\n      if (typeof projectId === \"object\") {\n        projectSecret = projectId.projectSecret;\n        projectId = projectId.projectId;\n      }\n      providers.push(new InfuraProvider(network, projectId, projectSecret));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /*\n      if (options.pocket !== \"-\") {\n          try {\n              let appId = options.pocket;\n              let secretKey: undefined | string = undefined;\n              let loadBalancer: undefined | boolean = undefined;\n              if (typeof(appId) === \"object\") {\n                  loadBalancer = !!appId.loadBalancer;\n                  secretKey = appId.secretKey;\n                  appId = appId.appId;\n              }\n              providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n          } catch (error) { console.log(error); }\n      }\n  */\n  if (options.quicknode !== \"-\") {\n    try {\n      let token = options.quicknode;\n      providers.push(new QuickNodeProvider(network, token));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"getDefaultProvider\"\n  });\n  if (providers.length === 1) {\n    return providers[0];\n  }\n  return new FallbackProvider(providers);\n}","map":{"version":3,"names":["assert","AnkrProvider","AlchemyProvider","CloudflareProvider","EtherscanProvider","InfuraProvider","QuickNodeProvider","FallbackProvider","JsonRpcProvider","WebSocketProvider","isWebSocketLike","value","send","close","getDefaultProvider","network","options","match","providers","alchemy","push","error","console","log","ankr","cloudflare","etherscan","infura","projectId","projectSecret","undefined","quicknode","token","length","operation"],"sources":["/Users/mc/Desktop/sdd_project/node_modules/ethers/src.ts/providers/default-provider.ts"],"sourcesContent":["\nimport { assert } from \"../utils/index.js\";\n\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\n\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport { WebSocketLike } from \"./provider-websocket.js\";\n\nfunction isWebSocketLike(value: any): value is WebSocketLike {\n    return (value && typeof(value.send) === \"function\" &&\n        typeof(value.close) === \"function\");\n}\n\nexport function getDefaultProvider(network: string | Networkish | WebSocketLike, options?: any): AbstractProvider {\n    if (options == null) { options = { }; }\n\n    if (typeof(network) === \"string\" && network.match(/^https?:/)) {\n        return new JsonRpcProvider(network);\n    }\n\n    if (typeof(network) === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new WebSocketProvider(network);\n    }\n\n    const providers: Array<AbstractProvider> = [ ];\n\n    if (options.alchemy !== \"-\") {\n        try {\n            providers.push(new AlchemyProvider(network, options.alchemy));\n        } catch (error) { console.log(error); }\n    }\n\n    if (options.ankr !== \"-\" && options.ankr != null) {\n        try {\n            providers.push(new AnkrProvider(network, options.ankr));\n        } catch (error) { console.log(error); }\n    }\n\n    if (options.cloudflare !== \"-\") {\n        try {\n            providers.push(new CloudflareProvider(network));\n        } catch (error) { console.log(error); }\n    }\n\n    if (options.etherscan !== \"-\") {\n        try {\n            providers.push(new EtherscanProvider(network, options.etherscan));\n        } catch (error) { console.log(error); }\n    }\n\n    if (options.infura !== \"-\") {\n        try {\n            let projectId = options.infura;\n            let projectSecret: undefined | string = undefined;\n            if (typeof(projectId) === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new InfuraProvider(network, projectId, projectSecret));\n        } catch (error) { console.log(error); }\n    }\n/*\n    if (options.pocket !== \"-\") {\n        try {\n            let appId = options.pocket;\n            let secretKey: undefined | string = undefined;\n            let loadBalancer: undefined | boolean = undefined;\n            if (typeof(appId) === \"object\") {\n                loadBalancer = !!appId.loadBalancer;\n                secretKey = appId.secretKey;\n                appId = appId.appId;\n            }\n            providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n        } catch (error) { console.log(error); }\n    }\n*/\n    if (options.quicknode !== \"-\") {\n        try {\n            let token = options.quicknode;\n            providers.push(new QuickNodeProvider(network, token));\n        } catch (error) { console.log(error); }\n    }\n\n    assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n\n    if (providers.length === 1) { return providers[0]; }\n\n    return new FallbackProvider(providers);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}