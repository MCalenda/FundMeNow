{"ast":null,"code":"/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\nexport class SocketSubscriber {\n  #provider;\n  #filter;\n  get filter() {\n    return JSON.parse(this.#filter);\n  }\n  #filterId;\n  #paused;\n  #emitPromise;\n  constructor(provider, filter) {\n    this.#provider = provider;\n    this.#filter = JSON.stringify(filter);\n    this.#filterId = null;\n    this.#paused = null;\n    this.#emitPromise = null;\n  }\n  start() {\n    this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      this.#provider._register(filterId, this);\n      return filterId;\n    });\n  }\n  stop() {\n    this.#filterId.then(filterId => {\n      this.#provider.send(\"eth_unsubscribe\", [filterId]);\n    });\n    this.#filterId = null;\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    this.#paused = !!dropWhilePaused;\n  }\n  resume() {\n    this.#paused = null;\n  }\n  _handleMessage(message) {\n    if (this.#filterId == null) {\n      return;\n    }\n    if (this.#paused === null) {\n      let emitPromise = this.#emitPromise;\n      if (emitPromise == null) {\n        emitPromise = this._emit(this.#provider, message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(this.#provider, message);\n        });\n      }\n      this.#emitPromise = emitPromise.then(() => {\n        if (this.#emitPromise === emitPromise) {\n          this.#emitPromise = null;\n        }\n      });\n    }\n  }\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\nexport class SocketBlockSubscriber extends SocketSubscriber {\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\nexport class SocketPendingSubscriber extends SocketSubscriber {\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\nexport class SocketEventSubscriber extends SocketSubscriber {\n  #logFilter;\n  get logFilter() {\n    return JSON.parse(this.#logFilter);\n  }\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    this.#logFilter = JSON.stringify(filter);\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\n/**\n *  SocketProvider...\n *\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n  #callbacks;\n  // Maps each filterId to its subscriber\n  #subs;\n  // If any events come in before a subscriber has finished\n  // registering, queue them\n  #pending;\n  constructor(network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    this.#callbacks = new Map();\n    this.#subs = new Map();\n    this.#pending = new Map();\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  _register(filterId, subscriber) {\n    this.#subs.set(filterId, subscriber);\n    const pending = this.#pending.get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      this.#pending.delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      this.#callbacks.set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  // Sub-classes must call this for each message\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (\"id\" in result) {\n      const callback = this.#callbacks.get(result.id);\n      if (callback == null) {\n        console.log(\"Weird... Response for not a thing we sent\");\n        return;\n      }\n      this.#callbacks.delete(result.id);\n      callback.resolve(result);\n      /*\n                  if (\"error\" in result) {\n                      const { message, code, data } = result.error;\n                      const error = makeError(message || \"unkonwn error\", \"SERVER_ERROR\", {\n                          request: `ws:${ JSON.stringify(callback.payload) }`,\n                          info: { code, data }\n                      });\n                      callback.reject(error);\n                  } else {\n                      callback.resolve(result.result);\n                  }\n      */\n    } else if (result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = this.#subs.get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = this.#pending.get(filterId);\n        if (pending == null) {\n          pending = [];\n          this.#pending.set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    }\n  }\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}","map":{"version":3,"names":["UnmanagedSubscriber","assert","assertArgument","JsonRpcApiProvider","SocketSubscriber","provider","filter","JSON","parse","filterId","paused","emitPromise","constructor","stringify","start","send","then","_register","stop","pause","dropWhilePaused","operation","resume","_handleMessage","message","_emit","Error","SocketBlockSubscriber","emit","parseInt","number","SocketPendingSubscriber","SocketEventSubscriber","logFilter","_wrapLog","_network","SocketProvider","callbacks","subs","pending","network","batchMaxCount","Map","_getSubscriber","sub","type","orphan","subscriber","set","get","delete","_send","payload","Array","isArray","promise","Promise","resolve","reject","id","_waitUntilReady","_write","_processMessage","result","callback","console","log","method","params","subscription","push"],"sources":["/Users/mc/Desktop/sdd_project/node_modules/ethers/src.ts/providers/provider-socket.ts"],"sourcesContent":["/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\n\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nimport type { Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type { JsonRpcError, JsonRpcPayload, JsonRpcResult } from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n\ntype JsonRpcSubscription = {\n    method: string,\n    params: {\n        result: any,\n        subscription: string\n    }\n};\n\nexport class SocketSubscriber implements Subscriber {\n    #provider: SocketProvider;\n\n    #filter: string;\n    get filter(): Array<any> { return JSON.parse(this.#filter); }\n\n    #filterId: null | Promise<string |number>;\n    #paused: null | boolean;\n\n    #emitPromise: null | Promise<void>;\n\n    constructor(provider: SocketProvider, filter: Array<any>) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n\n    start(): void {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n\n    stop(): void {\n        (<Promise<number>>(this.#filterId)).then((filterId) => {\n            this.#provider.send(\"eth_unsubscribe\", [ filterId ]);\n        });\n        this.#filterId = null;\n    }\n\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused?: boolean): void {\n        assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n\n    resume(): void {\n        this.#paused = null;\n    }\n\n    _handleMessage(message: any): void {\n        if (this.#filterId == null) { return; }\n        if (this.#paused === null) {\n            let emitPromise: null | Promise<void> = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            } else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\n\nexport class SocketBlockSubscriber extends SocketSubscriber {\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newHeads\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\n\nexport class SocketPendingSubscriber extends SocketSubscriber {\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newPendingTransactions\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"pending\", message);\n    }\n}\n\nexport class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter: string;\n    get logFilter(): EventFilter { return JSON.parse(this.#logFilter); }\n\n    constructor(provider: SocketProvider, filter: EventFilter) {\n        super(provider, [ \"logs\", filter ]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\n\n/**\n *  SocketProvider...\n *\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n    #callbacks: Map<number, { payload: JsonRpcPayload, resolve: (r: any) => void, reject: (e: Error) => void }>;\n\n    // Maps each filterId to its subscriber\n    #subs: Map<number | string, SocketSubscriber>;\n\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending: Map<number | string, Array<any>>;\n\n    constructor(network?: Networkish) {\n        super(network, { batchMaxCount: 1 });\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"close\":\n                return new UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n\n    _register(filterId: number | string, subscriber: SocketSubscriber): void {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        // WebSocket provider doesn't accept batches\n        assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n\n        // @TODO: stringify payloads here and store to prevent mutations\n\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n\n        return <Array<JsonRpcResult | JsonRpcError>>[ await promise ];\n    }\n\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n\n    // Sub-classes must call this for each message\n    async _processMessage(message: string): Promise<void> {\n        const result = <JsonRpcResult | JsonRpcError | JsonRpcSubscription>(JSON.parse(message));\n\n        if (\"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                console.log(\"Weird... Response for not a thing we sent\");\n                return;\n            }\n            this.#callbacks.delete(result.id);\n\n            callback.resolve(result);\n\n/*\n            if (\"error\" in result) {\n                const { message, code, data } = result.error;\n                const error = makeError(message || \"unkonwn error\", \"SERVER_ERROR\", {\n                    request: `ws:${ JSON.stringify(callback.payload) }`,\n                    info: { code, data }\n                });\n                callback.reject(error);\n            } else {\n                callback.resolve(result.result);\n            }\n*/\n        } else if (result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            } else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [ ];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n        }\n    }\n\n    async _write(message: string): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}